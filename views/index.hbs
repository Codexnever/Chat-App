<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <link rel="stylesheet" href="/css/chat.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <title>Chat Application</title>
</head>

<body>
    <div id="chat-container" data-user-id="{{userId}}">
        <div id="sidebar">
            <!-- Vertical strip content goes here -->
            <div class="sidebar-content">
                <!-- Add your content here -->
            </div>
            <div class="sidebar-icons">
                <div class="sidebar-icon">
                    <i class="fas fa-cog"></i> <!-- Settings icon -->
                </div>
                <div class="sidebar-icon">
                    <div class="icon-circle">
                        <i class="fas fa-user"></i> <!-- Account icon inside a circle -->
                    </div>
                </div>
            </div>
        </div>
        <div id="form-container">
            <div class="user">
                <p style="font-weight: bold;">Hello {{name}}</p>
                <div id="user-count-wrapper">
                    <p><span id="user-count">0</span></p>
                </div>
            </div>
            <div id="users">
                {{#each users}}
                <div class="client" data-user-id="{{this._id}}">
                    <img src="" class="user-profile-image">
                    <span class="user-name">{{this.name}}</span>
                </div>
                {{/each}}
            </div>

            <form id="form">
                <button id="emoji-icon" class="emoji-icon"><i class="fas fa-smile"></i></button>
                <input id="input" autocomplete="off" placeholder="Type a message..." />
                {{!-- Here Icon container --}}
                <div class="emoji-selector" id="emojiSelectorContainer">
                    <div class="emoji-list" id="emojiList"></div>
                </div>
                {{!-- End --}}


                {{!-- Earth container --}}
                <div class="earthemoji-selector" id="earthemojiSelectorContainer">
                    <div class="icon-container">
                        <label for="fileInput">
                            <i class="far fa-image earth-icon"></i>
                            <div class="icon-label">Gallery</div>
                        </label>
                        <input id="fileInput" type="file" style="display: none;" accept="image/*">
                    </div>
                    <div class="icon-container">
                        <i class="fas fa-folder-open earth-icon"></i>
                        <div class="icon-label">Document</div>
                    </div>
                    <div class="icon-container">
                        <i class="fas fa-camera earth-icon"></i>
                        <div class="icon-label">Camera</div>
                    </div>
                </div>
                {{!-- End --}}
                <button id="earth-icon" class="earth-icon"><i class="fa-solid fa-earth-americas"
                        style="color: black;"></i></button>
                <button id="submit-btn">Send</button>
            </form>
        </div>
        {{!-- Custom Alert --}}
        <div id="custom-alert" class="custom-alert">
            <div class="icon-circle">
                <span class="icon">&#9888;</span>
            </div>
            <div class="alert-content" id="alert-content"></div>
        </div>
        {{!-- End --}}
        <div id="messages-container">
            <div class="top-bar">
                <div class="left-section">
                    <img src="{{this.profileImage}}" alt="User Profile Image" class="user-profile-image">
                    <span class="user-name"></span>

                </div>
                <div class="right-section">
                    <div class="search-icon">
                        <i class="fas fa-search"></i>
                    </div>
                </div>
            </div>
            <div id="messages"></div>
        </div>
    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
    <script>

        const ab = document.getElementsByClassName('client');

        for (let i = 0; i < ab.length; i++) {
            ab[i].addEventListener('click', function () {
                document.getElementById('messages-container').style.display = 'flex';
                document.getElementById('form').style.display = 'flex';
            });
        }

        //End

        const userId = '{{userId}}';
        const userName = '{{userName}}';
        //   console.log('this is username',userName)
        const socket = io({ query: { userId, userName } });
        console.log('Socket:-', socket)

        //change topbar name according to click chat 
        document.querySelectorAll('.client').forEach(client => {
            client.addEventListener('click', () => {
                const userName = client.querySelector('.user-name').textContent;
                document.querySelector('.top-bar .user-name').textContent = userName;
                selectedUserId = client.dataset.userId;
                console.log('Selected userId:', selectedUserId);
            });
        });
        //End
        const form = document.getElementById('form');
        const input = document.getElementById('input');
const fileInput = document.getElementById('fileInput');

document.querySelector('.icon-container').addEventListener('click', () => {
    fileInput.click();
});

fileInput.addEventListener('change', (event) => {
    const selectedFile = event.target.files[0];
    if (selectedFile) {
        // Process the selected file here, e.g., send it to the server or display it to the user
        console.log('Selected file:', selectedFile);
        sendMessage(selectedFile); // Call the sendMessage function with the selected file
    }
});

function sendMessage(file) {
    if (!selectedUserId) {
        console.log('No user selected');
        return;
    }
    const message = input.value.trim();

    const messageData = {
        recipient: selectedUserId,
        message: message,
        file: file // Add the selected file to the message data
    };

    // Emit the message data to the server
    socket.emit('private message', messageData);

    // Clear the input fields
    input.value = '';
    fileInput.value = ''; // Reset the file input field

    // Hide the emoji and earth selectors
    emojiSelectorContainer.style.display = 'none';
    earthemojiSelectorContainer.style.display = 'none';
}
        // Update the form submission logic
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            if (!selectedUserId) {
                //    console.log('No user selected');
                return;
            }
            const message = input.value.trim();
            //  console.log('Message:', message);
            if (message !== '') {
                // Emit the message directly to the selected user
                socket.emit('private message', {
                    recipient: selectedUserId
                    , message
                });
                input.value = '';
                //  console.log('chack this',message)
            }

        });

        //This is getting message from server and appending it on chat 
 socket.on('private message', (data) => {
    const { sender, message, file } = data;

    const messagesContainer = document.getElementById('messages');
    const item = document.createElement('div');
    const messageText = document.createElement('span');

    if (file) {
        // If the message contains a file, display the image
        const imageUrl = URL.createObjectURL(file);
        const imageContainer = document.createElement('div');
        imageContainer.classList.add('received-image-container');
        const image = document.createElement('img');
        image.src = imageUrl;
        image.classList.add('received-image');
        image.addEventListener('click', () => {
            // Trigger download when the image is clicked
            downloadImage(imageUrl);
        });
        imageContainer.appendChild(image);
        item.appendChild(imageContainer);
    } else {
        messageText.textContent = message;
        item.appendChild(messageText);
    }

    item.classList.add('message');

    if (sender === userId) {
        item.classList.add('sender');
    } else {
        item.classList.add('receiver');
    }
    // Append the message to the chat interface
    messagesContainer.appendChild(item);
});

function downloadImage(url) {
    // Create an anchor element with the image URL as the href
    const link = document.createElement('a');
    link.href = url;
    // Set the download attribute to force download
    link.download = 'image.png';
    // Append the anchor element to the document body
    document.body.appendChild(link);
    // Trigger a click event on the anchor element
    link.click();
    // Remove the anchor element from the document body
    document.body.removeChild(link);
}
        const alertBox = document.getElementById("custom-alert");
        const alertContent = document.getElementById("alert-content");

        socket.on('recipient not found', (data) => {
            const recipient = data.recipient;
            const alertMessage = `Oops! It seems like  is snoozing right now. 😴 Try catching them later!`;
            showAlert(alertMessage);
        });

        function showAlert(message) {
            alertContent.innerHTML = `<p>${message}</p>`;
            alertBox.style.display = "block";
            setTimeout(closeAlert, 4000);
        }

        function closeAlert() {
            alertBox.style.display = "none";
        }

        /*
        socket.on('user connected', (data) => {
            const { userId } = data;
            alert(`New User is connected!`);
        });  */
        // Listen for the user count event and update the UI
        socket.on('user count', (count) => {
            document.getElementById('user-count').innerText = count;
        });



        const emojiSelectorContainer = document.getElementById('emojiSelectorContainer');
        const emojiList = document.getElementById('emojiList');
        const emojiIcon = document.getElementById('emoji-icon');
        let isEmojiSelectorVisible = false;

        emojiIcon.addEventListener('click', () => {
            if (!isEmojiSelectorVisible) {
                emojiSelectorContainer.style.display = 'block';
            } else {
                emojiSelectorContainer.style.display = 'none';
            }
            isEmojiSelectorVisible = !isEmojiSelectorVisible;
        });
        //This is for earth container
        const earthemojiSelectorContainer = document.getElementById('earthemojiSelectorContainer');
        const earthemojiIcon = document.getElementById('earth-icon');
        let earthisEmojiSelectorVisible = false;

        earthemojiIcon.addEventListener('click', () => {
            if (!earthisEmojiSelectorVisible) {
                earthemojiSelectorContainer.style.display = 'flex';
            } else {
                earthemojiSelectorContainer.style.display = 'none';
            }
            earthisEmojiSelectorVisible = !earthisEmojiSelectorVisible;
        });
        //End
        fetch('https://emoji-api.com/emojis?access_key=61ef1993745253f77c1a8f71da4f353b67de7f5e')
            .then(res => res.json())
            .then(data => loadEmoji(data))
            .catch(error => console.error('Error fetching emojis:', error));

        function loadEmoji(data) {
            data.forEach(emoji => {
                let span = document.createElement('span');
                span.classList.add('emoji-list-item');
                span.textContent = emoji.character;
                span.addEventListener('click', () => {
                    input.value += emoji.character;
                });
                emojiList.appendChild(span);
            });
        }
    </script>

</body>

</html>